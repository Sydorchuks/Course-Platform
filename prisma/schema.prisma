datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String       @id @default(uuid())
  userId      String?
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)

  categoryId  String?      @db.Uuid
  category    Category?    @relation(fields: [categoryId], references: [id])

  purchases Purchase[]
  chapters Chapter[]
  attachments Attachment[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([categoryId])
}

model Category {
  id       String     @id @default(uuid())
  name     String     @unique
  courses  Course[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Attachment {
  id        String    @id @default(uuid())
  name      String
  url       String

  courseId  String    @db.Uuid
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([courseId])
}

model Chapter {
  id        String    @id @default(uuid())
  title String
  description String?
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([courseId])
  
}

model MuxData {
  id        String    @id @default(uuid())
  assetId String
  playback String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress{
  id        String    @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  
  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase{
  id        String    @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt

  @@index([courseId])
}

model StripeCustomer{
  id        String    @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
}